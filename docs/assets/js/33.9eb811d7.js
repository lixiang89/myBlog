(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{528:function(t,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),a("h3",{attrs:{id:"date-parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-parse"}},[t._v("#")]),t._v(" "),a("code",[t._v("Date.parse()")])]),t._v(" "),a("p",[a("code",[t._v("Date.parse()")]),t._v("方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数。ECMA-262第5版定义了"),a("code",[t._v("Date.parse()")]),t._v("应该支持的日期格式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("格式")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("月/日/年")]),t._v(" "),a("td",[t._v("5/23/2020")])]),t._v(" "),a("tr",[a("td",[t._v("月名 日,年")]),t._v(" "),a("td",[t._v("May 23,2020")])]),t._v(" "),a("tr",[a("td",[t._v("周几 月名 日 年 时:分:秒 时区")]),t._v(" "),a("td",[t._v("Tue May 23 2020 00:00:00 GMT-0700")])]),t._v(" "),a("tr",[a("td",[t._v("YYYY-MM-DDTHH:mm:ss.sssZ")]),t._v(" "),a("td",[t._v("2020-05-23T00:00:00")])])])]),t._v(" "),a("p",[t._v("比如，要创建一个表示"),a("code",[t._v("2020-05-23")]),t._v("的日期对象，可以用")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"May 23,2020"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果传给的"),a("code",[t._v("Date.parse()")]),t._v("的字符串并不表示日期，则会返回"),a("code",[t._v("NaN")]),t._v("。如果直接把表示日期的字符串传给"),a("code",[t._v("Date")]),t._v("构造函数，那么"),a("code",[t._v("Date")]),t._v("会在后台调用"),a("code",[t._v("Date.parse()")]),t._v("。也就是说，下面的代码和上面的是等价的")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"May 23,2020"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"date-utc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-utc"}},[t._v("#")]),t._v(" "),a("code",[t._v("Date.UTC()")])]),t._v(" "),a("p",[t._v("此方法也返回日期的毫秒表示，参数是年、月（1月是0，2月是1，以此类推）、日（1-31）、时（0-23）、分、秒和毫秒。前两个参数是必需的，其他默认值除日为1外，剩余均为0。")]),t._v(" "),a("h2",{attrs:{id:"原始值包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始值包装类型"}},[t._v("#")]),t._v(" 原始值包装类型")]),t._v(" "),a("p",[t._v("为了方便操作原始值，ECMAScript提供了3种特殊的引用类型：Boolean、Number、String。每当用到某个原始值的方法或属性时，后台都会创建一个相应的原始包装类型对象，从而暴露出各种操作方法。如：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sth"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里呢，"),a("code",[t._v("s1")]),t._v("是一个原始值。但第二行紧接着用"),a("code",[t._v("s1")]),t._v("调用了"),a("code",[t._v("substring()")]),t._v("方法，并赋值给"),a("code",[t._v("s2")]),t._v("。我们知道原始值不是对象，所以不应该会有方法，但实际上这个例子确实如期执行了。原因呢就是"),a("code",[t._v("js")]),t._v("在后台进行了许多处理，具体说来，就是当第二行代码执行时，首先以已读模式访问"),a("code",[t._v("s1")]),t._v("，即从内存中读取变量保存的值。此时，后台会执行一些步骤：")]),t._v(" "),a("ol",[a("li",[t._v("创建一个"),a("code",[t._v("String")]),t._v("类型的实例")]),t._v(" "),a("li",[t._v("调用实例上的方法")]),t._v(" "),a("li",[t._v("销毁实例")])]),t._v(" "),a("p",[t._v("用代码展示：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 稍微改变了下原书中的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sth"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntemp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 书中代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sth'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ns1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n")])])]),a("p",[t._v("这种行为可以让原始值拥有对象的行为。引用类型与原始包装类型的主要区别在于对象的生命周期。在通过"),a("code",[t._v("new")]),t._v("实例化引用类型后，得到的实例会在离开作用域时销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码的执行期间。所以不能再运行时给原始值添加属性和方法。")])])}),[],!1,null,null,null);s.default=r.exports}}]);